{
  "version": 3,
  "sources": ["file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/form.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/base64.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/fetch.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/scripts/config.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/redirect.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/scripts/token.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/register/index.ts"],
  "sourcesContent": ["import { Problem } from \"./fetch.ts\";\r\n\r\nexport class FormError {\r\n  element: HTMLElement;\r\n  contents: HTMLElement;\r\n  action: string;\r\n\r\n  constructor(formId: string, action: string) {\r\n    this.element = getElementById<HTMLElement>(`${formId}/error`, HTMLElement);\r\n    this.contents = getElementById<HTMLElement>(`${formId}/error/content`, HTMLElement);\r\n    this.action = action;\r\n  }\r\n\r\n  clearError() {\r\n    this.element.classList.add(\"collapse\");\r\n    this.element.ariaHidden = \"true\";\r\n    this.contents.textContent = \"\";\r\n  }\r\n\r\n  addError(error: string) {\r\n    if (this.contents.textContent === \"\") {\r\n      this.element.classList.remove(\"collapse\");\r\n      this.element.ariaHidden = \"false\";\r\n      this.contents.textContent = `Could not ${this.action}: ${error}`;\r\n      return;\r\n    }\r\n\r\n    this.contents.textContent += `, ${error}`;\r\n  }\r\n\r\n  panic() {\r\n    this.element.classList.remove(\"collapse\");\r\n    this.element.ariaHidden = \"false\";\r\n    this.contents.textContent =\r\n      `Something went wrong while trying to ${this.action}. Try again later.`;\r\n  }\r\n}\r\n\r\nexport class Input {\r\n  input: HTMLInputElement;\r\n  error: HTMLElement;\r\n\r\n  constructor(formId: string, inputId: string) {\r\n    this.input = getElementById<HTMLInputElement>(`${formId}${inputId}/input`, HTMLInputElement);\r\n    this.error = getElementById<HTMLElement>(`${formId}${inputId}/error`, HTMLElement);\r\n\r\n    this.input.addEventListener(\"input\", () => {\r\n      this.input.setCustomValidity(\"\");\r\n    });\r\n  }\r\n\r\n  getValue(): string {\r\n    if (this.input.type === \"checkbox\") {\r\n      if (this.input.checked) {\r\n        return \"checked\";\r\n      } else {\r\n        return \"unchecked\";\r\n      }\r\n    } else {\r\n      return this.input.value;\r\n    }\r\n  }\r\n\r\n  setLock(lock: boolean) {\r\n    this.input.disabled = lock;\r\n  }\r\n\r\n  clearError() {\r\n    this.input.setCustomValidity(\"\");\r\n    this.error.classList.add(\"hidden\");\r\n    this.error.ariaHidden = \"true\";\r\n    this.error.textContent = \"!\";\r\n  }\r\n\r\n  addError(error: string) {\r\n    if (this.error.textContent === \"!\") {\r\n      this.input.setCustomValidity(error);\r\n      this.error.classList.remove(\"hidden\");\r\n      this.error.ariaHidden = \"false\";\r\n      this.error.textContent = `Invalid value: ${error}`;\r\n      return;\r\n    }\r\n    this.error.textContent += `, ${error}`;\r\n    this.input.setCustomValidity(this.error.textContent ?? \"Invalid value\");\r\n  }\r\n}\r\n\r\nexport class Form {\r\n  form: HTMLFormElement;\r\n  formError: FormError;\r\n  submitButton: HTMLButtonElement;\r\n  inputs: Map<string, Input>;\r\n\r\n  constructor(formId: string, inputIds: string[], action: string) {\r\n    this.form = getElementById<HTMLFormElement>(formId, HTMLFormElement);\r\n    this.formError = new FormError(formId, action);\r\n    this.submitButton = getElementById<HTMLButtonElement>(`${formId}/submit`, HTMLButtonElement);\r\n\r\n    const inputs = new Map<string, Input>();\r\n    for (const inputId of inputIds) {\r\n      inputs.set(inputId, new Input(formId, inputId));\r\n    }\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  clearErrors() {\r\n    this.formError.clearError();\r\n    for (const input of this.inputs.values()) {\r\n      input.clearError();\r\n    }\r\n  }\r\n\r\n  setLock(lock: boolean) {\r\n    this.submitButton.disabled = lock;\r\n    for (const input of this.inputs.values()) {\r\n      input.setLock(lock);\r\n    }\r\n  }\r\n\r\n  setInputErrors(problems: Problem[] | null) {\r\n    if (!problems || problems.length === 0) {\r\n      this.formError.addError(\"an unknown field is invalid\");\r\n      return;\r\n    }\r\n\r\n    for (const problem of problems) {\r\n      const input = this.inputs.get(problem.pointer) ?? null;\r\n\r\n      if (input) {\r\n        input.addError(problem.detail);\r\n      } else {\r\n        this.formError.addError(`field ${problem.pointer} ${problem.detail}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  getValues(): Map<string, string> {\r\n    const map = new Map();\r\n    for (const [id, input] of this.inputs) {\r\n      map.set(id, input.getValue());\r\n    }\r\n    return map;\r\n  }\r\n}\r\n\r\n// deno-lint-ignore no-explicit-any\r\ntype Class<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * # Panics\r\n * If element does not exist or is not an instance of the expected type.\r\n */\r\nfunction getElementById<T extends HTMLElement>(id: string, expected: Class<T>): T {\r\n  const element = document.getElementById(id);\r\n  if (!element || !(element instanceof expected)) {\r\n    throw `element '${id}' does not exist`;\r\n  }\r\n  return element;\r\n}\r\n", "declare global {\r\n  interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\r\n    toBase64(options?: { alphabet?: \"base64\" | \"base64url\"; omitPadding?: boolean }): string;\r\n  }\r\n\r\n  interface Uint8ArrayConstructor {\r\n    fromBase64(\r\n      string: string,\r\n      options?: {\r\n        alphabet?: \"base64\" | \"base64url\";\r\n        lastChunkHandling?: \"loose\" | \"strict\" | \"stop-before-partial\";\r\n      },\r\n    ): Uint8Array;\r\n  }\r\n}\r\n\r\nexport function base64Decode(input: string): Uint8Array {\r\n  return Uint8Array.fromBase64(input, {\r\n    alphabet: \"base64url\",\r\n    lastChunkHandling: \"loose\",\r\n  });\r\n}\r\n\r\nexport function base64Encode(input: Uint8Array): string {\r\n  return input.toBase64({ alphabet: \"base64url\", omitPadding: true });\r\n}\r\n", "import { base64Decode } from \"./base64.ts\";\r\n\r\ndeclare global {\r\n  namespace globalThis {\r\n    var tokenDomain: string | undefined;\r\n  }\r\n\r\n  interface Window {\r\n    cookieStore: CookieStore;\r\n  }\r\n\r\n  type Cookie = {\r\n    domain: string;\r\n    expires: number;\r\n    name: string;\r\n    path: string;\r\n    sameSite: \"strict\" | \"lax\" | \"none\";\r\n    secure: boolean;\r\n    value: string;\r\n  };\r\n\r\n  interface CookieStore {\r\n    delete(name: string): Promise<undefined>;\r\n    delete(options: {\r\n      name: string;\r\n      domain: string | undefined;\r\n      path: string | undefined;\r\n      partitioned: boolean | undefined;\r\n    }): Promise<undefined>;\r\n\r\n    get(name: string): Promise<Cookie | null>;\r\n    get(options: { name: string; url: string }): Promise<Cookie | null>;\r\n\r\n    set(name: string, value: string): Promise<undefined>;\r\n    set(\r\n      options: {\r\n        domain: string | undefined;\r\n        expires: number | undefined;\r\n        name: string;\r\n        partitioned: boolean | undefined;\r\n        path: string | undefined;\r\n        sameSite: \"strict\" | \"lax\" | \"none\" | undefined;\r\n        value: string;\r\n      },\r\n    ): Promise<undefined>;\r\n  }\r\n}\r\n\r\nexport type Problem = {\r\n  pointer: string;\r\n  detail: string;\r\n};\r\n\r\nexport type ServerResponse<T> =\r\n  | { status: \"ok\"; body: T }\r\n  | { status: \"badRequest\"; problems: Problem[] }\r\n  | { status: \"unauthenticated\" }\r\n  | { status: \"error\" }\r\n  | never;\r\n\r\nexport type Header = [string, string];\r\n\r\nexport const TOKEN_KEY = \"ts_token\";\r\n\r\nexport class FetchBuilder {\r\n  #method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\r\n  #url: string;\r\n  #additionalHeaders: Header[] | null = null;\r\n  #body: object | null = null;\r\n\r\n  constructor(method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\", url: string) {\r\n    this.#method = method;\r\n    this.#url = url;\r\n  }\r\n\r\n  setBody(body: object | null): FetchBuilder {\r\n    this.#body = body;\r\n    return this;\r\n  }\r\n\r\n  setHeaders(headers: Header[] | null): FetchBuilder {\r\n    this.#additionalHeaders = headers;\r\n    return this;\r\n  }\r\n\r\n  async fetch<T>(): Promise<ServerResponse<T>> {\r\n    return await fetch(\r\n      this.#method,\r\n      this.#url,\r\n      this.#additionalHeaders,\r\n      this.#body,\r\n    );\r\n  }\r\n}\r\n\r\nexport function setConfig(tokenDomain: string) {\r\n  Object.defineProperty(globalThis, \"tokenDomain\", {\r\n    value: tokenDomain,\r\n    writable: true,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nexport async function getToken(): Promise<\r\n  // deno-lint-ignore no-explicit-any\r\n  { bearer: string; claims: any } | null\r\n> {\r\n  const token = await globalThis.window.cookieStore.get(TOKEN_KEY);\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const parts = token.value.split(\".\");\r\n  if (parts.length !== 3) {\r\n    await deleteToken();\r\n    return null;\r\n  }\r\n\r\n  const decoder = new TextDecoder();\r\n  const claims = JSON.parse(decoder.decode(base64Decode(parts[1])));\r\n\r\n  return {\r\n    bearer: token.value,\r\n    claims,\r\n  };\r\n}\r\n\r\nexport async function deleteToken(): Promise<undefined> {\r\n  console.info(\"deleting token\");\r\n  await globalThis.window.cookieStore.delete(TOKEN_KEY);\r\n  return undefined;\r\n}\r\n\r\nexport async function setToken(token: string): Promise<undefined> {\r\n  if (globalThis.tokenDomain == undefined || globalThis.tokenDomain == null) {\r\n    throw new Error(\"`globalThis.tokenDomain` has not been set, token cannot be saved.\");\r\n  }\r\n  console.info(\"setting token\");\r\n  await globalThis.window.cookieStore.set({\r\n    domain: globalThis.tokenDomain,\r\n    name: TOKEN_KEY,\r\n    value: token,\r\n    sameSite: \"strict\",\r\n    expires: Date.now() + 1000 * 60 * 60 * 24 * 30,\r\n    partitioned: undefined,\r\n    path: undefined,\r\n  });\r\n  return undefined;\r\n}\r\n\r\nexport async function fetch<T>(\r\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\r\n  url: string,\r\n  additionalHeaders: Header[] | null,\r\n  body: object | null,\r\n): Promise<ServerResponse<T>> {\r\n  const headers = new Headers();\r\n\r\n  if (additionalHeaders) {\r\n    for (const header of additionalHeaders) {\r\n      headers.append(header[0], header[1]);\r\n    }\r\n  }\r\n\r\n  if (body) {\r\n    headers.append(\"content-type\", \"application/json\");\r\n  }\r\n\r\n  const token = await getToken();\r\n  if (token && !headers.has(\"Authorization\")) {\r\n    headers.append(\"Authorization\", token.bearer);\r\n  }\r\n\r\n  let bodyContent = null;\r\n  if (body) {\r\n    bodyContent = JSON.stringify(body);\r\n  }\r\n\r\n  const response = await self.fetch(url, {\r\n    method,\r\n    body: bodyContent,\r\n    headers,\r\n  }).catch((ex) => {\r\n    console.warn(ex);\r\n    return new Response(null, { status: 500 });\r\n  });\r\n\r\n  if (response.ok) {\r\n    const bearer = response.headers.get(\"Authorization\");\r\n    if (bearer) {\r\n      await setToken(bearer);\r\n    }\r\n\r\n    const body = await response.json().catch((ex) => {\r\n      console.warn(ex);\r\n      return {};\r\n    });\r\n\r\n    return {\r\n      status: \"ok\",\r\n      body,\r\n    };\r\n  }\r\n\r\n  switch (response.status) {\r\n    case 400: {\r\n      const body = await response.json().catch((ex) => {\r\n        console.warn(ex);\r\n        return { problems: [] };\r\n      });\r\n\r\n      return {\r\n        status: \"badRequest\",\r\n        problems: body.problems ?? [],\r\n      };\r\n    }\r\n    case 401:\r\n    case 403: {\r\n      return { status: \"unauthenticated\" };\r\n    }\r\n  }\r\n\r\n  return { status: \"error\" };\r\n}\r\n", "import { Header, setConfig as setFetchConfig } from \"../lib/fetch.ts\";\r\n\r\nexport const API_URL = \"http://localhost:8081\";\r\nexport const API_KEY: Header = [\"X-TS-API-Key\", \"identity-site\"];\r\n// TODO could API Key be moved to fetch config\r\n\r\nexport function setConfig() {\r\n  setFetchConfig(\"\");\r\n}\r\n", "export async function setHref(target: string): Promise<never> {\r\n  location.href = target;\r\n  return await block();\r\n}\r\n\r\nfunction block(): Promise<never> {\r\n  // deno-lint-ignore no-explicit-any\r\n  const poll = (resolve: any) => {\r\n    setTimeout(() => poll(resolve), 400);\r\n  };\r\n\r\n  return new Promise(poll);\r\n}\r\n", "import { deleteToken, FetchBuilder, getToken as retrieveToken } from \"../lib/fetch.ts\";\r\nimport { setHref } from \"../lib/redirect.ts\";\r\nimport { TokenDetails } from \"../types.ts\";\r\nimport { API_KEY, API_URL } from \"./config.ts\";\r\n\r\nexport async function getToken(): Promise<TokenDetails | null> {\r\n  const token = await retrieveToken();\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    bearer: token.bearer,\r\n    act: token.claims.act ?? null,\r\n    exp: token.claims.exp,\r\n    sub: token.claims.sub,\r\n    typ: token.claims.typ,\r\n    tid: token.claims.tid,\r\n  };\r\n}\r\n\r\nexport async function logout(should_return: boolean): Promise<never> {\r\n  const token = await getToken();\r\n  if (token) {\r\n    await new FetchBuilder(\"POST\", API_URL + \"/revoked-tokens\").setHeaders([API_KEY]).fetch();\r\n    alert(\"Your session has expired\");\r\n  }\r\n  await deleteToken();\r\n\r\n  const href = should_return ? `/login?redirect=${encodeURI(location.href)}` : \"/login\";\r\n  return await setHref(href);\r\n}\r\n", "import { Form } from \"../lib/form.ts\";\r\nimport { FetchBuilder } from \"../lib/fetch.ts\";\r\nimport { API_KEY, API_URL, setConfig } from \"../scripts/config.ts\";\r\nimport { setHref } from \"../lib/redirect.ts\";\r\nimport { getToken } from \"../scripts/token.ts\";\r\n\r\nsetConfig();\r\n\r\nconst token = await getToken();\r\nif (token) {\r\n  switch (token.typ) {\r\n    case \"common\":\r\n      await setHref(\"/identity\");\r\n      break;\r\n    case \"provisioning\":\r\n      await setHref(\"/add-passkey\");\r\n      break;\r\n  }\r\n}\r\n\r\nconst form = new Form(\"/register\", [\"/username\", \"/displayName\"], \"register\");\r\nform.form.addEventListener(\"submit\", async (event) => {\r\n  event.preventDefault();\r\n\r\n  form.setLock(true);\r\n  form.clearErrors();\r\n\r\n  const values = form.getValues();\r\n  const username = values.get(\"/username\") ?? \"\";\r\n  const displayName = values.get(\"/displayName\") ?? \"\";\r\n\r\n  const response = await new FetchBuilder(\"POST\", API_URL + \"/identities\")\r\n    .setHeaders([API_KEY])\r\n    .setBody({ username, displayName })\r\n    .fetch<unknown>();\r\n  const token = await getToken();\r\n  console.log(token);\r\n  if (response.status === \"ok\" && token) {\r\n    const params = new URLSearchParams(document.location.search);\r\n    const redirect = params.get(\"redirect\");\r\n    const nextPage = redirect ? `/add-passkey?redirect=${redirect}` : `/add-passkey`;\r\n    await setHref(nextPage);\r\n  }\r\n  else if (response.status === \"badRequest\") {\r\n    form.setInputErrors(response.problems);\r\n  }\r\n  else {\r\n    form.formError.panic();\r\n  }\r\n\r\n  form.setLock(false);\r\n});\r\n"],
  "mappings": "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",
  "names": ["FormError", "formId", "action", "getElementById", "error", "Input", "inputId", "lock", "Form", "inputIds", "inputs", "input", "problems", "problem", "map", "id", "expected", "element", "base64Decode", "input", "TOKEN_KEY", "FetchBuilder", "#method", "#url", "#additionalHeaders", "#body", "method", "url", "body", "headers", "fetch", "setConfig", "tokenDomain", "getToken", "token", "parts", "deleteToken", "decoder", "claims", "base64Decode", "setToken", "additionalHeaders", "header", "bodyContent", "response", "ex", "bearer", "API_URL", "API_KEY", "setConfig", "setHref", "target", "block", "poll", "resolve", "getToken", "token", "setConfig", "token", "getToken", "setHref", "form", "Form", "event", "values", "username", "displayName", "response", "FetchBuilder", "API_URL", "API_KEY", "redirect", "nextPage"]
}
