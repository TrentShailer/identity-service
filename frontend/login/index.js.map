{
  "version": 3,
  "sources": ["file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/base64.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/redirect.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/fetch.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/lib/form.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/scripts/config.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/scripts/pageRequirements.ts", "file:///C:/Users/trent/Files/Projects/identity-service/frontend/login/index.ts"],
  "sourcesContent": ["declare global {\r\n  interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\r\n    toBase64(options?: { alphabet?: \"base64\" | \"base64url\"; omitPadding?: boolean }): string;\r\n  }\r\n\r\n  interface Uint8ArrayConstructor {\r\n    fromBase64(\r\n      string: string,\r\n      options?: {\r\n        alphabet?: \"base64\" | \"base64url\";\r\n        lastChunkHandling?: \"loose\" | \"strict\" | \"stop-before-partial\";\r\n      },\r\n    ): Uint8Array;\r\n  }\r\n}\r\n\r\nexport function base64Decode(input: string): Uint8Array {\r\n  return Uint8Array.fromBase64(input, {\r\n    alphabet: \"base64url\",\r\n    lastChunkHandling: \"loose\",\r\n  });\r\n}\r\n\r\nexport function base64Encode(input: Uint8Array): string {\r\n  return input.toBase64({ alphabet: \"base64url\", omitPadding: true });\r\n}\r\n", "export async function setHref(target: string): Promise<never> {\r\n  location.href = target;\r\n  return await block();\r\n}\r\n\r\nfunction block(): Promise<never> {\r\n  // deno-lint-ignore no-explicit-any\r\n  const poll = (resolve: any) => {\r\n    setTimeout(() => poll(resolve), 400);\r\n  };\r\n\r\n  return new Promise(poll);\r\n}\r\n", "import { setHref } from \"./redirect.ts\";\r\n\r\nexport type Problem = {\r\n  pointer: string | null;\r\n  detail: string | null;\r\n};\r\n\r\nexport type ServerResponse<T> =\r\n  | { status: \"ok\"; body: T }\r\n  | { status: \"clientError\"; problems: Problem[] }\r\n  | { status: \"serverError\" }\r\n  | { status: \"unauthorized\" }\r\n  | { status: \"notFound\" }\r\n  | never;\r\n\r\nexport type LogoutConfig = {\r\n  deleteTokenEndpoint: string;\r\n  loginHref: string;\r\n  additionalHeaders: Header[];\r\n};\r\n\r\nexport type Header = [string, string];\r\n\r\nexport const TOKEN_KEY = \"token\";\r\n\r\nexport class FetchBuilder {\r\n  #method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\r\n  #url: string;\r\n  #additionalHeaders: Header[] | null = null;\r\n  #body: object | null = null;\r\n  #logoutConfig: LogoutConfig | null = null;\r\n  #logoutShouldReturn: boolean = false;\r\n\r\n  constructor(method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\", url: string) {\r\n    this.#method = method;\r\n    this.#url = url;\r\n  }\r\n\r\n  setBody(body: object | null): FetchBuilder {\r\n    this.#body = body;\r\n    return this;\r\n  }\r\n\r\n  setHeaders(headers: Header[] | null): FetchBuilder {\r\n    this.#additionalHeaders = headers;\r\n    return this;\r\n  }\r\n\r\n  setLogout(logoutConfig: LogoutConfig | null, shouldReturn: boolean): FetchBuilder {\r\n    this.#logoutConfig = logoutConfig;\r\n    this.#logoutShouldReturn = shouldReturn;\r\n    return this;\r\n  }\r\n\r\n  async fetch<T>(): Promise<ServerResponse<T>> {\r\n    return await fetch(\r\n      this.#method,\r\n      this.#url,\r\n      this.#additionalHeaders,\r\n      this.#body,\r\n      this.#logoutConfig,\r\n      this.#logoutShouldReturn,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function fetch<T>(\r\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\r\n  url: string,\r\n  additionalHeaders: Header[] | null,\r\n  body: object | null,\r\n  logoutConfig: LogoutConfig | null,\r\n  logoutShouldReturn: boolean,\r\n): Promise<ServerResponse<T>> {\r\n  const headers = new Headers();\r\n\r\n  if (additionalHeaders) {\r\n    for (const header of additionalHeaders) {\r\n      headers.append(header[0], header[1]);\r\n    }\r\n  }\r\n\r\n  if (body) {\r\n    headers.append(\"content-type\", \"application/json\");\r\n  }\r\n\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  if (token) {\r\n    headers.append(\"Authorization\", token);\r\n  }\r\n\r\n  let bodyContent = null;\r\n  if (body) {\r\n    bodyContent = JSON.stringify(body);\r\n  }\r\n\r\n  const response = await self.fetch(url, {\r\n    method,\r\n    body: bodyContent,\r\n    headers,\r\n  }).catch((ex) => {\r\n    console.warn(ex);\r\n    return new Response(null, { status: 500 });\r\n  });\r\n\r\n  if (response.ok) {\r\n    const bearer = response.headers.get(\"Authorization\");\r\n    if (bearer) {\r\n      localStorage.setItem(TOKEN_KEY, bearer);\r\n    }\r\n\r\n    const body = await response.json().catch((ex) => {\r\n      console.warn(ex);\r\n      return {};\r\n    });\r\n\r\n    return {\r\n      status: \"ok\",\r\n      body,\r\n    };\r\n  } else if (response.status === 401) {\r\n    if (logoutConfig) {\r\n      await logout(\r\n        logoutConfig,\r\n        logoutShouldReturn,\r\n      );\r\n    }\r\n\r\n    return { status: \"unauthorized\" };\r\n  } else if (response.status === 404) {\r\n    return { status: \"notFound\" };\r\n  } else if (response.status >= 400 && response.status < 500) {\r\n    const body = await response.json().catch((ex) => {\r\n      console.warn(ex);\r\n      return { problems: [] };\r\n    });\r\n\r\n    return {\r\n      status: \"clientError\",\r\n      problems: body.problems ?? [],\r\n    };\r\n  } else {\r\n    return { status: \"serverError\" };\r\n  }\r\n}\r\n\r\nexport async function logout(\r\n  config: LogoutConfig,\r\n  shouldReturn: boolean,\r\n): Promise<never> {\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  await new FetchBuilder(\"DELETE\", config.deleteTokenEndpoint).setHeaders(config.additionalHeaders)\r\n    .fetch();\r\n  localStorage.removeItem(TOKEN_KEY);\r\n\r\n  if (token) {\r\n    alert(\"Your session has expired\");\r\n  }\r\n\r\n  const href = shouldReturn\r\n    ? `${config.loginHref}?redirect=${encodeURI(location.href)}`\r\n    : config.loginHref;\r\n\r\n  return await setHref(href);\r\n}\r\n", "import { Problem } from \"./fetch.ts\";\r\n\r\nexport class FormError {\r\n  element: HTMLElement;\r\n  contents: HTMLElement;\r\n\r\n  constructor(formId: string) {\r\n    this.element = getElementById<HTMLElement>(`${formId}/error`, HTMLElement);\r\n    this.contents = getElementById<HTMLElement>(`${formId}/error/content`, HTMLElement);\r\n  }\r\n\r\n  clearError() {\r\n    this.element.classList.add(\"collapse\");\r\n    this.element.ariaHidden = \"true\";\r\n    this.contents.textContent = \"\";\r\n  }\r\n\r\n  addError(error: string) {\r\n    if (this.contents.textContent === \"\") {\r\n      this.setError(`Invalid form: ${error}`);\r\n      return;\r\n    }\r\n\r\n    this.contents.textContent += `, ${error}`;\r\n  }\r\n\r\n  setError(error: string) {\r\n    this.element.classList.remove(\"collapse\");\r\n    this.element.ariaHidden = \"false\";\r\n    this.contents.textContent = error;\r\n  }\r\n\r\n  unexpectedResponse(action: string) {\r\n    this.setError(`Could not ${action} because the server sent an unexpected response.`);\r\n  }\r\n}\r\n\r\nexport class Input {\r\n  input: HTMLInputElement;\r\n  error: HTMLElement;\r\n\r\n  constructor(formId: string, inputId: string) {\r\n    this.input = getElementById<HTMLInputElement>(`${formId}${inputId}/input`, HTMLInputElement);\r\n    this.error = getElementById<HTMLElement>(`${formId}${inputId}/error`, HTMLElement);\r\n\r\n    this.input.addEventListener(\"input\", () => {\r\n      this.input.setCustomValidity(\"\");\r\n    });\r\n  }\r\n\r\n  getValue(): string {\r\n    if (this.input.type === \"checkbox\") {\r\n      if (this.input.checked) {\r\n        return \"checked\";\r\n      } else {\r\n        return \"unchecked\";\r\n      }\r\n    } else {\r\n      return this.input.value;\r\n    }\r\n  }\r\n\r\n  lock() {\r\n    this.input.disabled = true;\r\n  }\r\n\r\n  unlock() {\r\n    this.input.disabled = false;\r\n  }\r\n\r\n  clearError() {\r\n    this.input.setCustomValidity(\"\");\r\n    this.error.classList.add(\"hidden\");\r\n    this.error.ariaHidden = \"true\";\r\n    this.error.textContent = \"!\";\r\n  }\r\n\r\n  addError(error: string) {\r\n    if (this.error.textContent === \"!\") {\r\n      this.setError(`Invalid value: ${error}`);\r\n      return;\r\n    }\r\n    this.error.textContent += `, ${error}`;\r\n    this.input.setCustomValidity(this.error.textContent ?? \"Invalid value\");\r\n  }\r\n\r\n  setError(error: string) {\r\n    this.input.setCustomValidity(error);\r\n    this.error.classList.remove(\"hidden\");\r\n    this.error.ariaHidden = \"false\";\r\n    this.error.textContent = error;\r\n  }\r\n}\r\n\r\nexport class Form {\r\n  form: HTMLFormElement;\r\n  formError: FormError;\r\n  submitButton: HTMLButtonElement;\r\n  inputs: Map<string, Input>;\r\n\r\n  constructor(formId: string, inputIds: string[]) {\r\n    this.form = getElementById<HTMLFormElement>(formId, HTMLFormElement);\r\n    this.formError = new FormError(formId);\r\n    this.submitButton = getElementById<HTMLButtonElement>(`${formId}/submit`, HTMLButtonElement);\r\n\r\n    const inputs = new Map<string, Input>();\r\n    for (const inputId of inputIds) {\r\n      inputs.set(inputId, new Input(formId, inputId));\r\n    }\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  clearErrors() {\r\n    this.formError.clearError();\r\n    for (const input of this.inputs.values()) {\r\n      input.clearError();\r\n    }\r\n  }\r\n\r\n  lock() {\r\n    this.submitButton.disabled = true;\r\n    for (const input of this.inputs.values()) {\r\n      input.lock();\r\n    }\r\n  }\r\n\r\n  unlock() {\r\n    this.submitButton.disabled = false;\r\n    for (const input of this.inputs.values()) {\r\n      input.unlock();\r\n    }\r\n  }\r\n\r\n  setInputErrors(problems: Problem[] | null) {\r\n    if (!problems || problems.length === 0) {\r\n      this.formError.addError(\"an unknown field is invalid\");\r\n      return;\r\n    }\r\n\r\n    for (const problem of problems) {\r\n      let input: Input | null = null;\r\n      if (problem.pointer) {\r\n        input = this.inputs.get(problem.pointer) ?? null;\r\n      }\r\n\r\n      if (input && problem.detail) {\r\n        input.addError(problem.detail);\r\n      } else if (input && !problem.detail) {\r\n        input.addError(\"unknown reason\");\r\n      } else if (!input && problem.detail) {\r\n        this.formError.addError(problem.detail);\r\n      } else {\r\n        this.formError.addError(\"an unknown field is invalid\");\r\n      }\r\n    }\r\n  }\r\n\r\n  getValues(): Map<string, string> {\r\n    const map = new Map();\r\n    for (const [id, input] of this.inputs) {\r\n      map.set(id, input.getValue());\r\n    }\r\n    return map;\r\n  }\r\n}\r\n\r\n// deno-lint-ignore no-explicit-any\r\ntype Class<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * # Panics\r\n * If element does not exist or is not an instance of the expected type.\r\n */\r\nfunction getElementById<T extends HTMLElement>(id: string, expected: Class<T>): T {\r\n  const element = document.getElementById(id);\r\n  if (!element || !(element instanceof expected)) {\r\n    throw `element '${id}' does not exist`;\r\n  }\r\n  return element;\r\n}\r\n", "import { Header, LogoutConfig } from \"../lib/fetch.ts\";\r\n\r\nexport const API_URL = \"http://localhost:8081\";\r\nexport const API_KEY: Header = [\"X-TS-API-Key\", \"identity-site\"];\r\n\r\nexport const LOGOUT_CONFIG: LogoutConfig = {\r\n  deleteTokenEndpoint: API_URL + \"/tokens/current\",\r\n  loginHref: \"/login\",\r\n  additionalHeaders: [API_KEY],\r\n};\r\n", "import { FetchBuilder, TOKEN_KEY } from \"../lib/fetch.ts\";\r\nimport { TokenDetails } from \"../types.ts\";\r\nimport { API_KEY, API_URL } from \"./config.ts\";\r\n\r\nexport async function getToken(): Promise<TokenDetails | null> {\r\n  const response = await new FetchBuilder(\"GET\", API_URL + \"/tokens/current\")\r\n    .setHeaders([API_KEY])\r\n    .fetch<TokenDetails>();\r\n\r\n  if (\r\n    response.status === \"serverError\"\r\n    || response.status === \"clientError\"\r\n    || response.status === \"unauthorized\"\r\n  ) {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    return null;\r\n  }\r\n\r\n  if (response.status === \"ok\") {\r\n    return response.body;\r\n  }\r\n  else {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    return null;\r\n  }\r\n}\r\n", "import { base64Encode } from \"../lib/base64.ts\";\r\nimport { FetchBuilder } from \"../lib/fetch.ts\";\r\nimport { Form } from \"../lib/form.ts\";\r\nimport { setHref } from \"../lib/redirect.ts\";\r\nimport { API_KEY, API_URL } from \"../scripts/config.ts\";\r\nimport { getToken } from \"../scripts/pageRequirements.ts\";\r\nimport { Challenge, TokenDetails } from \"../types.ts\";\r\n\r\nconst token = await getToken();\r\nif (token) {\r\n  switch (token.typ) {\r\n    case \"common\":\r\n      await setHref(\"/identity\");\r\n      break;\r\n    case \"provisioning\":\r\n      await setHref(\"/add-passkey\");\r\n      break;\r\n  }\r\n}\r\n\r\nconst form = new Form(\"/login\", [\"/username\"]);\r\n\r\ndocument.getElementById(\"prompt-resident-key\")!.addEventListener(\"mouseup\", async () => {\r\n  form.clearErrors();\r\n\r\n  const requestOptions = await getCredentialRequestOptions(null);\r\n  console.log(requestOptions);\r\n  if (!requestOptions) {\r\n    form.formError.unexpectedResponse(\"get credential request options\");\r\n    return;\r\n  }\r\n\r\n  const credential = await navigator.credentials.get({ publicKey: requestOptions })\r\n    .catch(() => {\r\n      return null;\r\n    });\r\n  if (\r\n    !credential\r\n    || !(credential instanceof PublicKeyCredential)\r\n    || !(credential.response instanceof AuthenticatorAssertionResponse)\r\n  ) {\r\n    form.formError.setError(\"Could not login because the prompt was cancelled.\");\r\n    return;\r\n  }\r\n\r\n  const response = await login(credential);\r\n  if (response === \"clientError\") {\r\n    form.formError.setError(\"Invalid credential.\");\r\n  }\r\n  else {\r\n    form.formError.unexpectedResponse(\"login\");\r\n  }\r\n});\r\n\r\nform.form.addEventListener(\"submit\", async (event) => {\r\n  try {\r\n    event.preventDefault();\r\n\r\n    form.lock();\r\n    form.clearErrors();\r\n\r\n    const values = form.getValues();\r\n    const username = values.get(\"/username\") ?? \"\";\r\n\r\n    const requestOptions = await getCredentialRequestOptions(username);\r\n    console.log(requestOptions);\r\n    if (!requestOptions) {\r\n      form.formError.unexpectedResponse(\"get credential request options\");\r\n      form.unlock();\r\n      return;\r\n    }\r\n\r\n    const credential = await navigator.credentials.get({ publicKey: requestOptions })\r\n      .catch(() => {\r\n        return null;\r\n      });\r\n    if (\r\n      !credential\r\n      || !(credential instanceof PublicKeyCredential)\r\n      || !(credential.response instanceof AuthenticatorAssertionResponse)\r\n    ) {\r\n      form.formError.setError(\"Could not login because the prompt was cancelled.\");\r\n      form.unlock();\r\n      return;\r\n    }\r\n\r\n    const response = await login(credential);\r\n    if (response === \"clientError\") {\r\n      form.formError.setError(\"Invalid credential.\");\r\n    }\r\n    else {\r\n      form.formError.unexpectedResponse(\"login\");\r\n    }\r\n  }\r\n  finally {\r\n    form.unlock();\r\n  }\r\n});\r\n\r\nasync function getCredentialRequestOptions(\r\n  username: string | null,\r\n): Promise<PublicKeyCredentialRequestOptions | null> {\r\n  const optionsResponse = await new FetchBuilder(\"GET\", API_URL + \"/credential-request-options\")\r\n    .setHeaders([API_KEY])\r\n    .fetch<PublicKeyCredentialRequestOptionsJSON>();\r\n  if (optionsResponse.status !== \"ok\") {\r\n    return null;\r\n  }\r\n  const optionsJson = optionsResponse.body;\r\n\r\n  const challengeResponse = await new FetchBuilder(\"POST\", API_URL + \"/challenges\")\r\n    .setHeaders([API_KEY])\r\n    .setBody({ identityId: null })\r\n    .fetch<Challenge>();\r\n  if (challengeResponse.status !== \"ok\") {\r\n    return null;\r\n  }\r\n\r\n  optionsJson.challenge = challengeResponse.body.challenge;\r\n\r\n  if (username) {\r\n    const allowedCredentialsResponse = await new FetchBuilder(\r\n      \"GET\",\r\n      API_URL + `/allowed-credentials/${username}`,\r\n    ).setHeaders([API_KEY])\r\n      .fetch<{ allowCredentials: PublicKeyCredentialDescriptorJSON[] }>();\r\n    if (allowedCredentialsResponse.status !== \"ok\") {\r\n      return null;\r\n    }\r\n\r\n    optionsJson\r\n      .allowCredentials = allowedCredentialsResponse.body.allowCredentials;\r\n  }\r\n\r\n  return PublicKeyCredential.parseRequestOptionsFromJSON(optionsJson);\r\n}\r\n\r\nasync function login(\r\n  credential: PublicKeyCredential,\r\n): Promise<never | \"serverError\" | \"clientError\"> {\r\n  if (!(credential.response instanceof AuthenticatorAssertionResponse)) {\r\n    return \"clientError\";\r\n  }\r\n  const response = await new FetchBuilder(\"POST\", API_URL + \"/tokens\")\r\n    .setHeaders([API_KEY])\r\n    .setBody({\r\n      credential: {\r\n        id: credential.id,\r\n        authenticatorAttachment: credential.authenticatorAttachment,\r\n        rawId: base64Encode(new Uint8Array(credential.rawId)),\r\n        response: {\r\n          authenticatorData: base64Encode(new Uint8Array(credential.response.authenticatorData)),\r\n          clientDataJSON: base64Encode(new Uint8Array(credential.response.clientDataJSON)),\r\n          signature: base64Encode(new Uint8Array(credential.response.signature)),\r\n          userHandle: credential.response.userHandle\r\n            ? base64Encode(new Uint8Array(credential.response.userHandle))\r\n            : null,\r\n        },\r\n      },\r\n      typ: \"common\",\r\n    })\r\n    .fetch<TokenDetails>();\r\n\r\n  if (response.status === \"ok\") {\r\n    const params = new URLSearchParams(document.location.search);\r\n    const redirect = params.get(\"redirect\");\r\n    const nextPage = redirect ? decodeURI(redirect) : \"/identity\";\r\n    return await setHref(nextPage);\r\n  }\r\n\r\n  if (response.status === \"serverError\") {\r\n    return \"serverError\";\r\n  }\r\n  else {\r\n    return \"clientError\";\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["base64Encode", "input", "setHref", "target", "block", "poll", "resolve", "TOKEN_KEY", "FetchBuilder", "#method", "#url", "#additionalHeaders", "#body", "#logoutConfig", "#logoutShouldReturn", "method", "url", "body", "headers", "logoutConfig", "shouldReturn", "fetch", "additionalHeaders", "logoutShouldReturn", "header", "token", "bodyContent", "response", "ex", "bearer", "logout", "config", "href", "setHref", "FormError", "formId", "getElementById", "error", "action", "Input", "inputId", "Form", "inputIds", "inputs", "input", "problems", "problem", "map", "id", "expected", "element", "API_URL", "API_KEY", "LOGOUT_CONFIG", "getToken", "response", "FetchBuilder", "API_URL", "API_KEY", "TOKEN_KEY", "token", "getToken", "setHref", "form", "Form", "requestOptions", "getCredentialRequestOptions", "credential", "login", "event", "username", "optionsResponse", "FetchBuilder", "API_URL", "API_KEY", "optionsJson", "challengeResponse", "allowedCredentialsResponse", "response", "base64Encode", "redirect", "nextPage"]
}
