#![doc = "Generated by sql-helper v0.5.1"]
#![allow(unused, missing_docs)]
pub mod migrations {
    #[doc = "# SQL\n```sql\nCREATE TABLE IF NOT EXISTS identities (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  username VARCHAR UNIQUE NOT NULL,\r\n  display_name VARCHAR NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE DEFAULT (timezone('utc', NOW()) + '1 day'::INTERVAL)\r\n);\n```\n\n```sql\nCREATE UNIQUE INDEX IF NOT EXISTS identity_username_index ON identities (username);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS public_keys (\r\n  raw_id VARCHAR PRIMARY KEY NOT NULL,\r\n  identity_id VARCHAR NOT NULL REFERENCES identities (id) ON DELETE CASCADE,\r\n  display_name VARCHAR NOT NULL,\r\n  public_key VARCHAR NOT NULL,\r\n  public_key_algorithm INT NOT NULL,\r\n  transports VARCHAR ARRAY NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  last_used TIMESTAMP WITH TIME ZONE DEFAULT NULL\r\n);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS challenges (\r\n  challenge VARCHAR NOT NULL PRIMARY KEY,\r\n  identity_id VARCHAR REFERENCES identities(id) ON DELETE CASCADE,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()) + '15 minutes'::INTERVAL)\r\n);\n```"]
    pub fn migrate() -> [&'static str; 4usize] {
        [
            "CREATE TABLE IF NOT EXISTS identities (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  username VARCHAR UNIQUE NOT NULL,\r\n  display_name VARCHAR NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE DEFAULT (timezone('utc', NOW()) + '1 day'::INTERVAL)\r\n);",
            "CREATE UNIQUE INDEX IF NOT EXISTS identity_username_index ON identities (username);",
            "CREATE TABLE IF NOT EXISTS public_keys (\r\n  raw_id VARCHAR PRIMARY KEY NOT NULL,\r\n  identity_id VARCHAR NOT NULL REFERENCES identities (id) ON DELETE CASCADE,\r\n  display_name VARCHAR NOT NULL,\r\n  public_key VARCHAR NOT NULL,\r\n  public_key_algorithm INT NOT NULL,\r\n  transports VARCHAR ARRAY NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  last_used TIMESTAMP WITH TIME ZONE DEFAULT NULL\r\n);",
            "CREATE TABLE IF NOT EXISTS challenges (\r\n  challenge VARCHAR NOT NULL PRIMARY KEY,\r\n  identity_id VARCHAR REFERENCES identities(id) ON DELETE CASCADE,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()) + '15 minutes'::INTERVAL)\r\n);",
        ]
    }
    pub struct MigrateParams<'a> {
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> MigrateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 0usize] {
            []
        }
    }
}
pub mod clean {
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  identities\r\nWHERE\r\n  expires > timezone('utc', NOW());\n```\n\n```sql\nDELETE FROM\r\n  challenges\r\nWHERE\r\n  expires > timezone('utc', NOW());\n```"]
    pub fn clean_expired() -> [&'static str; 2usize] {
        [
            "DELETE FROM\r\n  identities\r\nWHERE\r\n  expires > timezone('utc', NOW());",
            "DELETE FROM\r\n  challenges\r\nWHERE\r\n  expires > timezone('utc', NOW());",
        ]
    }
    pub struct CleanExpiredParams<'a> {
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CleanExpiredParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 0usize] {
            []
        }
    }
}
pub mod identities {
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  username = $1;\n```"]
    pub fn get_by_username() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  username = $1;",
        ]
    }
    pub struct GetByUsernameParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByUsernameParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  id = $1;\n```"]
    pub fn get_by_id() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  id = $1;",
        ]
    }
    pub struct GetByIdParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  identities (id, username, display_name)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires;\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  identities (id, username, display_name)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires;",
        ]
    }
    pub struct CreateParams<'a> {
        pub p1: &'a str,
        pub p2: &'a str,
        pub p3: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 3usize] {
            [&self.p1, &self.p2, &self.p3]
        }
    }
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  identities\r\nWHERE\r\n  id = $1;\n```"]
    pub fn delete_by_id() -> [&'static str; 1usize] {
        ["DELETE FROM\r\n  identities\r\nWHERE\r\n  id = $1;"]
    }
    pub struct DeleteByIdParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> DeleteByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nUPDATE\r\n  identities\r\nSET\r\n  expires = NULL\r\nWHERE\r\n  id = $1;\n```"]
    pub fn flag_permanant() -> [&'static str; 1usize] {
        ["UPDATE\r\n  identities\r\nSET\r\n  expires = NULL\r\nWHERE\r\n  id = $1;"]
    }
    pub struct FlagPermanantParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> FlagPermanantParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
}
pub mod challenge {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  challenges (challenge, identity_id)\r\nVALUES\r\n  ($1, $2)\r\nRETURNING\r\n  challenge,\r\n  identity_id,\r\n  created,\r\n  expires;\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  challenges (challenge, identity_id)\r\nVALUES\r\n  ($1, $2)\r\nRETURNING\r\n  challenge,\r\n  identity_id,\r\n  created,\r\n  expires;",
        ]
    }
    pub struct CreateParams<'a> {
        pub p1: &'a str,
        pub p2: Option<&'a str>,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 2usize] {
            [&self.p1, &self.p2]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  challenge,\r\n  identity_id,\r\n  created,\r\n  expires\r\nFROM\r\n  challenges\r\nWHERE\r\n  challenge = $1;\n```"]
    pub fn get() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  challenge,\r\n  identity_id,\r\n  created,\r\n  expires\r\nFROM\r\n  challenges\r\nWHERE\r\n  challenge = $1;",
        ]
    }
    pub struct GetParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
}
pub mod public_key {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  public_keys (\r\n    raw_id,\r\n    identity_id,\r\n    display_name,\r\n    public_key,\r\n    public_key_algorithm,\r\n    transports\r\n  )\r\nVALUES\r\n  ($1, $2, $3, $4, $5, $6);\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  public_keys (\r\n    raw_id,\r\n    identity_id,\r\n    display_name,\r\n    public_key,\r\n    public_key_algorithm,\r\n    transports\r\n  )\r\nVALUES\r\n  ($1, $2, $3, $4, $5, $6);",
        ]
    }
    pub struct CreateParams<'a> {
        pub p1: &'a str,
        pub p2: &'a str,
        pub p3: &'a str,
        pub p4: &'a str,
        pub p5: &'a i32,
        pub p6: &'a [String],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 6usize] {
            [&self.p1, &self.p2, &self.p3, &self.p4, &self.p5, &self.p6]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  identity_id = $1;\n```"]
    pub fn get_by_identity() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  identity_id = $1;",
        ]
    }
    pub struct GetByIdentityParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdentityParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  raw_id = $1;\n```"]
    pub fn get_by_id() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  raw_id = $1;",
        ]
    }
    pub struct GetByIdParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nUPDATE\r\n  public_keys\r\nSET\r\n  last_used = $1\r\nWHERE\r\n  raw_id = $2;\n```"]
    pub fn update_last_used() -> [&'static str; 1usize] {
        ["UPDATE\r\n  public_keys\r\nSET\r\n  last_used = $1\r\nWHERE\r\n  raw_id = $2;"]
    }
    pub struct UpdateLastUsedParams<'a> {
        pub p1: Option<&'a sql_helper_lib::SqlTimestamp>,
        pub p2: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> UpdateLastUsedParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 2usize] {
            [&self.p1, &self.p2]
        }
    }
}
