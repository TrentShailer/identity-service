#![doc = "Generated by sql-helper v0.5.4"]
#![allow(unused, missing_docs)]
pub mod migrations {
    #[doc = "# SQL\n```sql\nCREATE TABLE IF NOT EXISTS identities (\r\n  id BYTEA PRIMARY KEY NOT NULL,\r\n  username VARCHAR UNIQUE NOT NULL,\r\n  display_name VARCHAR NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE DEFAULT (timezone('utc', NOW()) + '1 day'::INTERVAL)\r\n);\n```\n\n```sql\nCREATE UNIQUE INDEX IF NOT EXISTS identity_username_index ON identities (username);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS public_keys (\r\n  raw_id BYTEA PRIMARY KEY NOT NULL,\r\n  identity_id BYTEA NOT NULL REFERENCES identities (id) ON DELETE CASCADE,\r\n  display_name VARCHAR NOT NULL,\r\n  public_key BYTEA NOT NULL,\r\n  public_key_algorithm INT NOT NULL,\r\n  transports VARCHAR ARRAY NOT NULL,\r\n  signature_counter INT8 NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  last_used TIMESTAMP WITH TIME ZONE DEFAULT NULL\r\n);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS challenges (\r\n  challenge BYTEA NOT NULL PRIMARY KEY,\r\n  identity_id BYTEA REFERENCES identities(id) ON DELETE CASCADE,\r\n  origin VARCHAR NOT NULL,\r\n  issued TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()) + '15 minutes'::INTERVAL)\r\n);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS revocations (\r\n  token VARCHAR NOT NULL PRIMARY KEY,\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL\r\n);\n```"]
    pub fn migrate() -> [&'static str; 5usize] {
        [
            "CREATE TABLE IF NOT EXISTS identities (\r\n  id BYTEA PRIMARY KEY NOT NULL,\r\n  username VARCHAR UNIQUE NOT NULL,\r\n  display_name VARCHAR NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE DEFAULT (timezone('utc', NOW()) + '1 day'::INTERVAL)\r\n);",
            "CREATE UNIQUE INDEX IF NOT EXISTS identity_username_index ON identities (username);",
            "CREATE TABLE IF NOT EXISTS public_keys (\r\n  raw_id BYTEA PRIMARY KEY NOT NULL,\r\n  identity_id BYTEA NOT NULL REFERENCES identities (id) ON DELETE CASCADE,\r\n  display_name VARCHAR NOT NULL,\r\n  public_key BYTEA NOT NULL,\r\n  public_key_algorithm INT NOT NULL,\r\n  transports VARCHAR ARRAY NOT NULL,\r\n  signature_counter INT8 NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  last_used TIMESTAMP WITH TIME ZONE DEFAULT NULL\r\n);",
            "CREATE TABLE IF NOT EXISTS challenges (\r\n  challenge BYTEA NOT NULL PRIMARY KEY,\r\n  identity_id BYTEA REFERENCES identities(id) ON DELETE CASCADE,\r\n  origin VARCHAR NOT NULL,\r\n  issued TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()) + '15 minutes'::INTERVAL)\r\n);",
            "CREATE TABLE IF NOT EXISTS revocations (\r\n  token VARCHAR NOT NULL PRIMARY KEY,\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL\r\n);",
        ]
    }
    pub struct MigrateParams<'a> {
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> MigrateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 0usize] {
            []
        }
    }
}
pub mod clean {
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  identities\r\nWHERE\r\n  expires > timezone('utc', NOW())\r\nRETURNING\r\n  id;\n```\n\n```sql\nDELETE FROM\r\n  challenges\r\nWHERE\r\n  expires > timezone('utc', NOW());\n```\n\n```sql\nDELETE FROM\r\n  revocations\r\nWHERE\r\n  expires > timezone('utc', NOW());\n```"]
    pub fn clean_expired() -> [&'static str; 3usize] {
        [
            "DELETE FROM\r\n  identities\r\nWHERE\r\n  expires > timezone('utc', NOW())\r\nRETURNING\r\n  id;",
            "DELETE FROM\r\n  challenges\r\nWHERE\r\n  expires > timezone('utc', NOW());",
            "DELETE FROM\r\n  revocations\r\nWHERE\r\n  expires > timezone('utc', NOW());",
        ]
    }
    pub struct CleanExpiredParams<'a> {
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CleanExpiredParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 0usize] {
            []
        }
    }
}
pub mod identities {
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  username = $1;\n```"]
    pub fn get_by_username() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  username = $1;",
        ]
    }
    pub struct GetByUsernameParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByUsernameParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  id = $1;\n```"]
    pub fn get_by_id() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  id = $1;",
        ]
    }
    pub struct GetByIdParams<'a> {
        pub p1: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  identities (id, username, display_name)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires;\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  identities (id, username, display_name)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires;",
        ]
    }
    pub struct CreateParams<'a> {
        pub p1: &'a [u8],
        pub p2: &'a str,
        pub p3: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 3usize] {
            [&self.p1, &self.p2, &self.p3]
        }
    }
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  identities\r\nWHERE\r\n  id = $1;\n```"]
    pub fn delete_by_id() -> [&'static str; 1usize] {
        ["DELETE FROM\r\n  identities\r\nWHERE\r\n  id = $1;"]
    }
    pub struct DeleteByIdParams<'a> {
        pub p1: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> DeleteByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nUPDATE\r\n  identities\r\nSET\r\n  expires = NULL\r\nWHERE\r\n  id = $1;\n```"]
    pub fn flag_permanant() -> [&'static str; 1usize] {
        ["UPDATE\r\n  identities\r\nSET\r\n  expires = NULL\r\nWHERE\r\n  id = $1;"]
    }
    pub struct FlagPermanantParams<'a> {
        pub p1: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> FlagPermanantParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
}
pub mod challenge {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  challenges (challenge, identity_id, origin)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  challenge,\r\n  identity_id,\r\n  origin,\r\n  issued,\r\n  expires;\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  challenges (challenge, identity_id, origin)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  challenge,\r\n  identity_id,\r\n  origin,\r\n  issued,\r\n  expires;",
        ]
    }
    pub struct CreateParams<'a> {
        pub p1: &'a [u8],
        pub p2: Option<&'a [u8]>,
        pub p3: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 3usize] {
            [&self.p1, &self.p2, &self.p3]
        }
    }
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  challenges\r\nWHERE\r\n  challenge = $1\r\nRETURNING\r\n  challenge,\r\n  identity_id,\r\n  origin,\r\n  issued,\r\n  expires;\n```"]
    pub fn take() -> [&'static str; 1usize] {
        [
            "DELETE FROM\r\n  challenges\r\nWHERE\r\n  challenge = $1\r\nRETURNING\r\n  challenge,\r\n  identity_id,\r\n  origin,\r\n  issued,\r\n  expires;",
        ]
    }
    pub struct TakeParams<'a> {
        pub p1: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> TakeParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
}
pub mod public_key {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  public_keys (\r\n    raw_id,\r\n    identity_id,\r\n    display_name,\r\n    public_key,\r\n    public_key_algorithm,\r\n    signature_counter,\r\n    transports\r\n  )\r\nVALUES\r\n  ($1, $2, $3, $4, $5, $6, $7)\r\nRETURNING\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  signature_counter,\r\n  created,\r\n  last_used;\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  public_keys (\r\n    raw_id,\r\n    identity_id,\r\n    display_name,\r\n    public_key,\r\n    public_key_algorithm,\r\n    signature_counter,\r\n    transports\r\n  )\r\nVALUES\r\n  ($1, $2, $3, $4, $5, $6, $7)\r\nRETURNING\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  signature_counter,\r\n  created,\r\n  last_used;",
        ]
    }
    pub struct CreateParams<'a> {
        pub p1: &'a [u8],
        pub p2: &'a [u8],
        pub p3: &'a str,
        pub p4: &'a [u8],
        pub p5: &'a i32,
        pub p6: &'a i64,
        pub p7: &'a [String],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 7usize] {
            [
                &self.p1, &self.p2, &self.p3, &self.p4, &self.p5, &self.p6, &self.p7,
            ]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  signature_counter,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  identity_id = $1;\n```"]
    pub fn get_by_identity() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  signature_counter,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  identity_id = $1;",
        ]
    }
    pub struct GetByIdentityParams<'a> {
        pub p1: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdentityParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  signature_counter,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  raw_id = $1\r\n  AND identity_id = $2;\n```"]
    pub fn get_by_id() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  raw_id,\r\n  identity_id,\r\n  display_name,\r\n  public_key,\r\n  public_key_algorithm,\r\n  transports,\r\n  signature_counter,\r\n  created,\r\n  last_used\r\nFROM\r\n  public_keys\r\nWHERE\r\n  raw_id = $1\r\n  AND identity_id = $2;",
        ]
    }
    pub struct GetByIdParams<'a> {
        pub p1: &'a [u8],
        pub p2: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 2usize] {
            [&self.p1, &self.p2]
        }
    }
    #[doc = "# SQL\n```sql\nUPDATE\r\n  public_keys\r\nSET\r\n  last_used = $1,\r\n  signature_counter = $2\r\nWHERE\r\n  raw_id = $3\r\n  AND identity_id = $4;\n```"]
    pub fn update_last_used() -> [&'static str; 1usize] {
        [
            "UPDATE\r\n  public_keys\r\nSET\r\n  last_used = $1,\r\n  signature_counter = $2\r\nWHERE\r\n  raw_id = $3\r\n  AND identity_id = $4;",
        ]
    }
    pub struct UpdateLastUsedParams<'a> {
        pub p1: &'a ts_sql_helper_lib::SqlTimestamp,
        pub p2: &'a i64,
        pub p3: &'a [u8],
        pub p4: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> UpdateLastUsedParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 4usize] {
            [&self.p1, &self.p2, &self.p3, &self.p4]
        }
    }
}
pub mod revocation {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  revocations (token, expires)\r\nVALUES\r\n  ($1, $2);\n```"]
    pub fn revoke() -> [&'static str; 1usize] {
        ["INSERT INTO\r\n  revocations (token, expires)\r\nVALUES\r\n  ($1, $2);"]
    }
    pub struct RevokeParams<'a> {
        pub p1: &'a str,
        pub p2: &'a ts_sql_helper_lib::SqlTimestamp,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> RevokeParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 2usize] {
            [&self.p1, &self.p2]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  token,\r\n  expires\r\nFROM\r\n  revocations\r\nWHERE\r\n  token = $1;\n```"]
    pub fn get_by_token() -> [&'static str; 1usize] {
        ["SELECT\r\n  token,\r\n  expires\r\nFROM\r\n  revocations\r\nWHERE\r\n  token = $1;"]
    }
    pub struct GetByTokenParams<'a> {
        pub p1: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByTokenParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.p1]
        }
    }
}
