#![doc = "Generated by cli-helper v0.3.0"]
#![allow(unused, missing_docs)]
pub mod migrations {
    #[doc = "# SQL\n```sql\nCREATE TABLE IF NOT EXISTS identities (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  username VARCHAR UNIQUE NOT NULL,\r\n  display_name VARCHAR NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE DEFAULT (timezone('utc', NOW()) + '1 day'::INTERVAL)\r\n);\n```\n\n```sql\nCREATE UNIQUE INDEX IF NOT EXISTS identity_username_index ON identities (username);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS public_keys (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  identity_id VARCHAR NOT NULL REFERENCES identities (id) ON DELETE CASCADE,\r\n  raw_id BYTEA NOT NULL,\r\n  public_key BYTEA NOT NULL,\r\n  public_key_algorithm INT NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()))\r\n);\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS challenges (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  identity_id VARCHAR NOT NULL REFERENCES identities(id) ON DELETE CASCADE,\r\n  challenge BYTEA NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()) + '15 minutes'::INTERVAL)\r\n);\n```"]
    pub fn migrate() -> [&'static str; 4usize] {
        [
            "CREATE TABLE IF NOT EXISTS identities (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  username VARCHAR UNIQUE NOT NULL,\r\n  display_name VARCHAR NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE DEFAULT (timezone('utc', NOW()) + '1 day'::INTERVAL)\r\n);",
            "CREATE UNIQUE INDEX IF NOT EXISTS identity_username_index ON identities (username);",
            "CREATE TABLE IF NOT EXISTS public_keys (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  identity_id VARCHAR NOT NULL REFERENCES identities (id) ON DELETE CASCADE,\r\n  raw_id BYTEA NOT NULL,\r\n  public_key BYTEA NOT NULL,\r\n  public_key_algorithm INT NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()))\r\n);",
            "CREATE TABLE IF NOT EXISTS challenges (\r\n  id VARCHAR PRIMARY KEY NOT NULL,\r\n  identity_id VARCHAR NOT NULL REFERENCES identities(id) ON DELETE CASCADE,\r\n  challenge BYTEA NOT NULL,\r\n  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW())),\r\n  expires TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (timezone('utc', NOW()) + '15 minutes'::INTERVAL)\r\n);",
        ]
    }
    pub struct MigrateParams<'a> {
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> MigrateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 0usize] {
            []
        }
    }
}
pub mod clean {
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  identities\r\nWHERE\r\n  expires > timezone('utc', NOW());\n```\n\n```sql\nDELETE FROM\r\n  challenges\r\nWHERE\r\n  expires > timezone('utc', NOW());\n```"]
    pub fn clean_expired() -> [&'static str; 2usize] {
        [
            "DELETE FROM\r\n  identities\r\nWHERE\r\n  expires > timezone('utc', NOW());",
            "DELETE FROM\r\n  challenges\r\nWHERE\r\n  expires > timezone('utc', NOW());",
        ]
    }
    pub struct CleanExpiredParams<'a> {
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CleanExpiredParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 0usize] {
            []
        }
    }
}
pub mod identities {
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  username = $1;\n```"]
    pub fn get_by_username() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  username = $1;",
        ]
    }
    pub struct GetByUsernameParams<'a> {
        pub param_0: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByUsernameParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.param_0]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  id = $1;\n```"]
    pub fn get_by_id() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires\r\nFROM\r\n  identities\r\nWHERE\r\n  id = $1;",
        ]
    }
    pub struct GetByIdParams<'a> {
        pub param_0: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.param_0]
        }
    }
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  identities (id, username, display_name)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires;\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  identities (id, username, display_name)\r\nVALUES\r\n  ($1, $2, $3)\r\nRETURNING\r\n  id,\r\n  username,\r\n  display_name,\r\n  created,\r\n  expires;",
        ]
    }
    pub struct CreateParams<'a> {
        pub param_0: &'a str,
        pub param_1: &'a str,
        pub param_2: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 3usize] {
            [&self.param_0, &self.param_1, &self.param_2]
        }
    }
    #[doc = "# SQL\n```sql\nDELETE FROM\r\n  identities\r\nWHERE\r\n  id = $1;\n```"]
    pub fn delete_by_id() -> [&'static str; 1usize] {
        ["DELETE FROM\r\n  identities\r\nWHERE\r\n  id = $1;"]
    }
    pub struct DeleteByIdParams<'a> {
        pub param_0: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> DeleteByIdParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.param_0]
        }
    }
}
pub mod challenge {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  challenges (id, identity_id, challenge)\r\nVALUES\r\n  ($1, $2, $3);\n```"]
    pub fn create() -> [&'static str; 1usize] {
        ["INSERT INTO\r\n  challenges (id, identity_id, challenge)\r\nVALUES\r\n  ($1, $2, $3);"]
    }
    pub struct CreateParams<'a> {
        pub param_0: &'a str,
        pub param_1: &'a str,
        pub param_2: &'a [u8],
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 3usize] {
            [&self.param_0, &self.param_1, &self.param_2]
        }
    }
}
pub mod public_key {
    #[doc = "# SQL\n```sql\nINSERT INTO\r\n  public_keys (\r\n    id,\r\n    identity_id,\r\n    raw_id,\r\n    public_key,\r\n    public_key_algorithm\r\n  )\r\nVALUES\r\n  ($1, $2, $3, $4, $5);\n```"]
    pub fn create() -> [&'static str; 1usize] {
        [
            "INSERT INTO\r\n  public_keys (\r\n    id,\r\n    identity_id,\r\n    raw_id,\r\n    public_key,\r\n    public_key_algorithm\r\n  )\r\nVALUES\r\n  ($1, $2, $3, $4, $5);",
        ]
    }
    pub struct CreateParams<'a> {
        pub param_0: &'a str,
        pub param_1: &'a str,
        pub param_2: &'a [u8],
        pub param_3: &'a [u8],
        pub param_4: &'a i32,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> CreateParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 5usize] {
            [
                &self.param_0,
                &self.param_1,
                &self.param_2,
                &self.param_3,
                &self.param_4,
            ]
        }
    }
    #[doc = "# SQL\n```sql\nSELECT\r\n  id,\r\n  identity_id,\r\n  raw_id,\r\n  public_key,\r\n  public_key_algorithm,\r\n  created\r\nFROM\r\n  public_keys\r\nWHERE\r\n  identity_id = $1;\n```"]
    pub fn get_by_identity() -> [&'static str; 1usize] {
        [
            "SELECT\r\n  id,\r\n  identity_id,\r\n  raw_id,\r\n  public_key,\r\n  public_key_algorithm,\r\n  created\r\nFROM\r\n  public_keys\r\nWHERE\r\n  identity_id = $1;",
        ]
    }
    pub struct GetByIdentityParams<'a> {
        pub param_0: &'a str,
        pub phantom_data: core::marker::PhantomData<&'a ()>,
    }
    impl<'a> GetByIdentityParams<'a> {
        pub fn params(&'a self) -> [&'a (dyn postgres::types::ToSql + Sync); 1usize] {
            [&self.param_0]
        }
    }
}
